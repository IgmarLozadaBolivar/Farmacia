// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(DbAppContext))]
    partial class DbAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion del cargo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del cargo");

                    b.HasKey("Id");

                    b.ToTable("Cargo", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre de la categoria");

                    b.HasKey("Id");

                    b.ToTable("Categoria", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("IdDepFk")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre de la ciudad");

                    b.HasKey("Id");

                    b.HasIndex("IdDepFk");

                    b.ToTable("Ciudad", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CompraProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad")
                        .HasComment("Cantidad que se vendio");

                    b.Property<int>("IdFarFK")
                        .HasColumnType("int");

                    b.Property<int>("IdMedFK")
                        .HasColumnType("int");

                    b.Property<int>("IdProvFK")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("Precio")
                        .HasComment("Precio total de lo que se vendio");

                    b.HasKey("Id");

                    b.HasIndex("IdFarFK");

                    b.HasIndex("IdMedFK");

                    b.HasIndex("IdProvFK");

                    b.ToTable("Compra Proveedor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("IdTipoConFK")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Numero")
                        .HasComment("Numero de contacto");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoConFK");

                    b.ToTable("Contacto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("IdPaisFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del departamento");

                    b.HasKey("Id");

                    b.HasIndex("IdPaisFK");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion de la direccion");

                    b.Property<int>("IdCiuFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCiuFK");

                    b.ToTable("Direccion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellidos")
                        .HasComment("Apellidos del doctor");

                    b.Property<int>("Edad")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("Edad")
                        .HasComment("Edad del doctor");

                    b.Property<int>("IdConFK")
                        .HasColumnType("int");

                    b.Property<int>("IdDirFK")
                        .HasColumnType("int");

                    b.Property<int>("IdEspFK")
                        .HasColumnType("int");

                    b.Property<int>("IdGenFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPerFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombres")
                        .HasComment("Nombres del docto");

                    b.HasKey("Id");

                    b.HasIndex("IdConFK");

                    b.HasIndex("IdDirFK");

                    b.HasIndex("IdEspFK");

                    b.HasIndex("IdGenFK");

                    b.HasIndex("IdTipoDocFK");

                    b.HasIndex("IdTipoPerFK");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Especializacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion de la especializacion");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaRegistro")
                        .HasComment("Fecha de registro de la especializacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre de la especializacion");

                    b.HasKey("Id");

                    b.ToTable("Especializacion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(7)
                        .HasColumnType("int")
                        .HasColumnName("Cantidad")
                        .HasComment("Cantidad total de la factura");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion de la factura");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Estado")
                        .HasComment("Estado de la factura");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaCreacion")
                        .HasComment("Fecha de creacion de la factura");

                    b.Property<int>("IdFarFK")
                        .HasColumnType("int");

                    b.Property<int>("IdForFK")
                        .HasColumnType("int");

                    b.Property<int>("IdMedFK")
                        .HasColumnType("int");

                    b.Property<int>("IdPacFK")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Valor")
                        .HasComment("Valor total de la factura");

                    b.HasKey("Id");

                    b.HasIndex("IdFarFK");

                    b.HasIndex("IdForFK");

                    b.HasIndex("IdMedFK");

                    b.HasIndex("IdPacFK");

                    b.ToTable("Factura", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Farmaceutico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellidos")
                        .HasComment("Apellidos del farmaceutico");

                    b.Property<int>("Edad")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("Edad")
                        .HasComment("Edad del farmaceutico");

                    b.Property<int>("IdCarFK")
                        .HasColumnType("int");

                    b.Property<int>("IdConFK")
                        .HasColumnType("int");

                    b.Property<int>("IdDirFK")
                        .HasColumnType("int");

                    b.Property<int>("IdGenFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPerFK")
                        .HasColumnType("int");

                    b.Property<int>("IdUserFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombres")
                        .HasComment("Nombres del farmaceutico");

                    b.HasKey("Id");

                    b.HasIndex("IdCarFK");

                    b.HasIndex("IdConFK");

                    b.HasIndex("IdDirFK");

                    b.HasIndex("IdGenFK");

                    b.HasIndex("IdTipoDocFK");

                    b.HasIndex("IdTipoPerFK");

                    b.HasIndex("IdUserFK");

                    b.ToTable("Farmaceutico", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion de la formula");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaCreacion")
                        .HasComment("Fecha de creacion de la formula");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaExpiracion")
                        .HasComment("Fecha de expiracion de la formula");

                    b.Property<int>("IdDocFK")
                        .HasColumnType("int");

                    b.Property<int>("IdPacFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDocFK");

                    b.HasIndex("IdPacFK");

                    b.ToTable("Formula", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Abreviatura")
                        .HasComment("Abreviatura del genero");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion del genero");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del genero");

                    b.HasKey("Id");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre de la marca");

                    b.HasKey("Id");

                    b.ToTable("Marca", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion del medicamento");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("Disponibilidad")
                        .HasComment("Disponibilidad del medicamento");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaVencimiento")
                        .HasComment("Fecha de vencimiento del medicamento");

                    b.Property<int>("IdCatFK")
                        .HasColumnType("int");

                    b.Property<int>("IdMarFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPreFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del medicamento");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("Precio")
                        .HasComment("Precio del medicamento");

                    b.Property<int>("Stock")
                        .HasMaxLength(999)
                        .HasColumnType("int")
                        .HasColumnName("Stock")
                        .HasComment("Stock del medicamento");

                    b.HasKey("Id");

                    b.HasIndex("IdCatFK");

                    b.HasIndex("IdMarFK");

                    b.HasIndex("IdTipoPreFK");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellidos")
                        .HasComment("Apellidos del paciente");

                    b.Property<string>("Edad")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Edad")
                        .HasComment("Edad del paciente");

                    b.Property<DateTime>("FechaNac")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaNac")
                        .HasComment("Fecha de nacimiento del paciente");

                    b.Property<int>("IdConFK")
                        .HasColumnType("int");

                    b.Property<int>("IdDirFK")
                        .HasColumnType("int");

                    b.Property<int>("IdGenFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPerFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombres")
                        .HasComment("Nombres del paciente");

                    b.HasKey("Id");

                    b.HasIndex("IdConFK");

                    b.HasIndex("IdDirFK");

                    b.HasIndex("IdGenFK");

                    b.HasIndex("IdTipoDocFK");

                    b.HasIndex("IdTipoPerFK");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Capital")
                        .HasComment("Capital del pais");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del pais");

                    b.HasKey("Id");

                    b.ToTable("Pais", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellidos")
                        .HasComment("Apellidos del proveedor");

                    b.Property<int>("Edad")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("Edad")
                        .HasComment("Edad del proveedor");

                    b.Property<int>("IdConFK")
                        .HasColumnType("int");

                    b.Property<int>("IdDirFK")
                        .HasColumnType("int");

                    b.Property<int>("IdGenFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocFK")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoPerFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombres")
                        .HasComment("Nombres del proveedor");

                    b.HasKey("Id");

                    b.HasIndex("IdConFK");

                    b.HasIndex("IdDirFK");

                    b.HasIndex("IdGenFK");

                    b.HasIndex("IdTipoDocFK");

                    b.HasIndex("IdTipoPerFK");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RegistroFormula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistros")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaRegistro")
                        .HasComment("Fecha de registro de formulas x dia");

                    b.Property<int>("IdForFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdForFK");

                    b.ToTable("Registro Formula", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del rol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del tipo de contacto");

                    b.HasKey("Id");

                    b.ToTable("Tipo Contacto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Abreviatura")
                        .HasComment("Abreviatura del tipo de documento");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion del tipo de documento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del tipo de documento");

                    b.HasKey("Id");

                    b.ToTable("Tipo Documento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Descripcion")
                        .HasComment("Descripcion del tipo de persona");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del tipo de persona");

                    b.HasKey("Id");

                    b.ToTable("Tipo Persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoPresentacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre")
                        .HasComment("Nombre del tipo de presentacion del medicamento");

                    b.HasKey("Id");

                    b.ToTable("Tipo Presentacion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("IdRolFK")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Password")
                        .HasComment("contraseña del usuario");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username")
                        .HasComment("Nombre de usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdRolFK");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Domain.Entities.CompraProveedor", b =>
                {
                    b.HasOne("Domain.Entities.Farmaceutico", "Farmaceutico")
                        .WithMany("CompraProveedores")
                        .HasForeignKey("IdFarFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamentos")
                        .WithMany("CompraProveedores")
                        .HasForeignKey("IdMedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Proveedor", "Proveedor")
                        .WithMany("CompraProveedores")
                        .HasForeignKey("IdProvFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmaceutico");

                    b.Navigation("Medicamentos");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Domain.Entities.Contacto", b =>
                {
                    b.HasOne("Domain.Entities.TipoContacto", "TipoContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("IdTipoConFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.HasOne("Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPaisFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.HasOne("Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdCiuFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Contacto", "Contacto")
                        .WithMany("Doctores")
                        .HasForeignKey("IdConFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithMany("Doctores")
                        .HasForeignKey("IdDirFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Especializacion", "Especializacion")
                        .WithMany("Doctores")
                        .HasForeignKey("IdEspFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genero", "Genero")
                        .WithMany("Doctores")
                        .HasForeignKey("IdGenFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Doctores")
                        .HasForeignKey("IdTipoDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Doctores")
                        .HasForeignKey("IdTipoPerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Direccion");

                    b.Navigation("Especializacion");

                    b.Navigation("Genero");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.Entities.Factura", b =>
                {
                    b.HasOne("Domain.Entities.Farmaceutico", "Farmaceutico")
                        .WithMany("Facturas")
                        .HasForeignKey("IdFarFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Formula", "Formula")
                        .WithMany("Facturas")
                        .HasForeignKey("IdForFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("Facturas")
                        .HasForeignKey("IdMedFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Facturas")
                        .HasForeignKey("IdPacFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmaceutico");

                    b.Navigation("Formula");

                    b.Navigation("Medicamento");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Farmaceutico", b =>
                {
                    b.HasOne("Domain.Entities.Cargo", "Cargo")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdCarFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contacto", "Contacto")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdConFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdDirFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genero", "Genero")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdGenFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdTipoDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdTipoPerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Farmaceuticos")
                        .HasForeignKey("IdUserFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Contacto");

                    b.Navigation("Direccion");

                    b.Navigation("Genero");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Formula", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Formulas")
                        .HasForeignKey("IdDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Formulas")
                        .HasForeignKey("IdPacFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.HasOne("Domain.Entities.Categoria", "Categoria")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdCatFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Marca", "Marca")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdMarFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPresentacion", "TipoPresentacion")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdTipoPreFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Marca");

                    b.Navigation("TipoPresentacion");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.HasOne("Domain.Entities.Contacto", "Contacto")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdConFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdDirFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genero", "Genero")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdGenFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdTipoDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdTipoPerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Direccion");

                    b.Navigation("Genero");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.HasOne("Domain.Entities.Contacto", "Contacto")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdConFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Direccion", "Direccion")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdDirFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genero", "Genero")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdGenFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdTipoPerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacto");

                    b.Navigation("Direccion");

                    b.Navigation("Genero");

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.Entities.RegistroFormula", b =>
                {
                    b.HasOne("Domain.Entities.Formula", "Formula")
                        .WithMany("RegistroFormulas")
                        .HasForeignKey("IdForFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("IdRolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Navigation("Farmaceuticos");
                });

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Domain.Entities.Contacto", b =>
                {
                    b.Navigation("Doctores");

                    b.Navigation("Farmaceuticos");

                    b.Navigation("Pacientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Domain.Entities.Direccion", b =>
                {
                    b.Navigation("Doctores");

                    b.Navigation("Farmaceuticos");

                    b.Navigation("Pacientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("Domain.Entities.Especializacion", b =>
                {
                    b.Navigation("Doctores");
                });

            modelBuilder.Entity("Domain.Entities.Farmaceutico", b =>
                {
                    b.Navigation("CompraProveedores");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Entities.Formula", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("RegistroFormulas");
                });

            modelBuilder.Entity("Domain.Entities.Genero", b =>
                {
                    b.Navigation("Doctores");

                    b.Navigation("Farmaceuticos");

                    b.Navigation("Pacientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.Marca", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Navigation("CompraProveedores");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Proveedor", b =>
                {
                    b.Navigation("CompraProveedores");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.TipoContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Doctores");

                    b.Navigation("Farmaceuticos");

                    b.Navigation("Pacientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.TipoPersona", b =>
                {
                    b.Navigation("Doctores");

                    b.Navigation("Farmaceuticos");

                    b.Navigation("Pacientes");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Domain.Entities.TipoPresentacion", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Farmaceuticos");
                });
#pragma warning restore 612, 618
        }
    }
}
